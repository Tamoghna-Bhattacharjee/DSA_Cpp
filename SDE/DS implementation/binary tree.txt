Left View of Binary Tree
https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1

Top View of Binary Tree
https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1

Bottom View of Binary Tree 
https://practice.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1

Vertical Traversal of BST
https://practice.geeksforgeeks.org/problems/print-a-binary-tree-in-vertical-order/1

Boundary Traversal of Binary tree 
https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1

Diagonal Traversal of Binary Tree
https://practice.geeksforgeeks.org/problems/diagonal-traversal-of-binary-tree/1

House Robber III
https://leetcode.com/problems/house-robber-iii/


Postorder Traversal iterative:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        if (!root) return v;
        stack<TreeNode*> s;
        s.push(root);
        
        while (!s.empty()) {
            auto cur = s.top();
            s.pop();
            v.push_back(cur->val);
            if (cur->left) s.push(cur->left);
            if (cur->right) s.push(cur->right);
        }
        reverse(v.begin(), v.end());
        return v;
    }

Preorder Traversal iterative:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        if (!root) return v;
        stack<TreeNode*> s;
        s.push(root);
        
        while (!s.empty()) {
            auto cur = s.top();
            s.pop();
            v.push_back(cur->val);
            if (cur->right) s.push(cur->right);
            if (cur->left) s.push(cur->left);
        }
        return v;
    }

Inorder Traversal iterative:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        if (!root) return v;
        
        stack<TreeNode*> s;
        TreeNode* cur = root;
        
        while (cur != NULL || !s.empty()) {
            if (cur) {
                s.push(cur);
                cur = cur->left;
            } else {
                TreeNode* temp = s.top(); s.pop();
                v.push_back(temp->val);
                cur = temp->right;
            }
        }
        return v;
    }



Cnt Number of turns in a binary tree:
    Node* lca(Node* root, int F, int S) {
        if (!root) return NULL;
        if (root->data == F || root->data == S) return root; 
        Node* L = lca(root->left, F, S);
        Node* R = lca(root->right, F, S);
        if (L && R) return root;
        else return L != NULL? L: R;
    }
    
    int cntTurns(Node* root, bool goLeft, bool goRight, int F, int S) {
        if (!root) return INT_MIN;
        if (root->data == F || root->data == S) return 0;
        int L = cntTurns(root->left, true, false, F, S) + (goLeft? 0: 1);
        int R = cntTurns(root->right, false, true, F, S) + (goRight? 0: 1);
        if (L >= 0 && R >= 0) return L+R+1;
        else return L >= 0? L: R;
    }
    
    int NumberOFTurns(struct Node* root, int first, int second) {
        Node* LCA = lca(root, first, second);
        if (LCA->data == first || LCA->data == second) {
            int lft = cntTurns(LCA->left, true, false, first, second);
            int rgt = cntTurns(LCA->right, false, true, first, second);
            if (lft >= 0) return lft == 0? -1: lft;
            else if (rgt >= 0) return rgt == 0? -1: rgt;
            else return -1;
        } else {
            return cntTurns(LCA,true, true, first, second);
        }  
    }

Reverse alternate levels of a perfect binary tree
(// https://practice.geeksforgeeks.org/problems/reverse-alternate-levels-of-a-perfect-binary-tree/1/)
    void dfs(Node* r1, Node* r2, int lvl) {
        if (r1 == NULL || r2 == NULL) return;
        if (lvl%2) swap(r1->data, r2->data);
        dfs(r1->left, r2->right, lvl+1);
        dfs(r1->right, r2->left, lvl+1);
    }

    void reverseAlternate(Node *root)
    {
        dfs(root->left, root->right, 1);
    }


Construct Tree from Inorder & Preorder:
    Node* dfs(int in[], int pre[], int &ind, map<int, int> &mp, int L, int R) {
        // mp -> map of the indexes of inorder traversal nodes
        if (L > R) return NULL;
        Node* root = new Node(pre[ind++]);
        root->left = dfs(in, pre, ind, mp, L, mp[root->data]-1);
        root->right = dfs(in, pre, ind, mp, mp[root->data]+1, R);
        return root;
    }




Step-By-Step Directions From a Binary Tree Node to Another:
// https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/description/

    TreeNode* getLCA(TreeNode* r, int a, int b) {
        if (!r) return NULL;
        if (r->val == a || r->val == b) return r;
        TreeNode* L = getLCA(r->left, a, b);
        TreeNode* R = getLCA(r->right, a, b);
        if (L && R) return r;
        else return L == NULL? R: L;
    }

    bool getDir(TreeNode* r, int x, int isLeft, string &s) {
        if (r == NULL) return false;
        if (r->val == x) {
            if (isLeft == 1) s.push_back('L');
            else if (isLeft == 0) s.push_back('R');
            return true;
        }
        bool L = getDir(r->left, x, 1, s);
        bool R = getDir(r->right, x, 0, s);
        
        if (L | R) {
            if (isLeft == 1) s.push_back('L');
            else if (isLeft == 0) s.push_back('R');
        }
        return L | R;
    } 

    string getDirections(TreeNode* root, int a, int b) {
        TreeNode* lca = getLCA(root, a, b);
        cout << lca->val << endl;
        string s1 = "", s2 = "";
        getDir(lca, a, -1, s1);
        getDir(lca, b, -1, s2);
        for (char &i: s1) i = 'U';
        reverse(s2.begin(), s2.end());
        return s1+s2;
    }