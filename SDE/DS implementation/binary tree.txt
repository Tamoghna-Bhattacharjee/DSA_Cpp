Left View of Binary Tree
https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1

Top View of Binary Tree
https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1

Bottom View of Binary Tree 
https://practice.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1

Vertical Traversal of BST
https://practice.geeksforgeeks.org/problems/print-a-binary-tree-in-vertical-order/1

Boundary Traversal of Binary tree 
https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1

House Robber III
https://leetcode.com/problems/house-robber-iii/


Postorder Traversal iterative:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        if (!root) return v;
        stack<TreeNode*> s;
        s.push(root);
        
        while (!s.empty()) {
            auto cur = s.top();
            s.pop();
            v.push_back(cur->val);
            if (cur->left) s.push(cur->left);
            if (cur->right) s.push(cur->right);
        }
        reverse(v.begin(), v.end());
        return v;
    }

Preorder Traversal iterative:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        if (!root) return v;
        stack<TreeNode*> s;
        s.push(root);
        
        while (!s.empty()) {
            auto cur = s.top();
            s.pop();
            v.push_back(cur->val);
            if (cur->right) s.push(cur->right);
            if (cur->left) s.push(cur->left);
        }
        return v;
    }

Inorder Traversal iterative:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        if (!root) return v;
        
        stack<TreeNode*> s;
        TreeNode* cur = root;
        
        while (cur != NULL || !s.empty()) {
            if (cur) {
                s.push(cur);
                cur = cur->left;
            } else {
                TreeNode* temp = s.top(); s.pop();
                v.push_back(temp->val);
                cur = temp->right;
            }
        }
        return v;
    }

